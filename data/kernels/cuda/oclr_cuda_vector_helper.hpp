// NOTE: this is an automatically generated file!
// If you need to change anything in here, please have a look at etc/cuda_support/cuda_support.sh
// don't include this header on it's own, but rather include oclr_cuda_base.h

#ifndef __OCLRASTER_CUDA_VECTOR_HELPER_HPP__
#define __OCLRASTER_CUDA_VECTOR_HELPER_HPP__

template<class vec_type, size_t target_size> struct vector_mapping {
	typedef void type;
	typedef void src_type;
	static const size_t vec_size = 1;
	static const size_t src_vec_size = 1;
};

template<> struct vector_mapping<uchar, 1> { typedef uchar type; typedef uchar src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uchar, 2> { typedef uchar2 type; typedef uchar src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uchar, 3> { typedef uchar3 type; typedef uchar src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uchar, 4> { typedef uchar4 type; typedef uchar src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uchar2, 1> { typedef uchar type; typedef uchar2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uchar2, 2> { typedef uchar2 type; typedef uchar2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uchar2, 3> { typedef uchar3 type; typedef uchar2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uchar2, 4> { typedef uchar4 type; typedef uchar2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uchar3, 1> { typedef uchar type; typedef uchar3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uchar3, 2> { typedef uchar2 type; typedef uchar3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uchar3, 3> { typedef uchar3 type; typedef uchar3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uchar3, 4> { typedef uchar4 type; typedef uchar3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uchar4, 1> { typedef uchar type; typedef uchar4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uchar4, 2> { typedef uchar2 type; typedef uchar4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uchar4, 3> { typedef uchar3 type; typedef uchar4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uchar4, 4> { typedef uchar4 type; typedef uchar4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ushort, 1> { typedef ushort type; typedef ushort src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ushort, 2> { typedef ushort2 type; typedef ushort src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ushort, 3> { typedef ushort3 type; typedef ushort src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ushort, 4> { typedef ushort4 type; typedef ushort src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ushort2, 1> { typedef ushort type; typedef ushort2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ushort2, 2> { typedef ushort2 type; typedef ushort2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ushort2, 3> { typedef ushort3 type; typedef ushort2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ushort2, 4> { typedef ushort4 type; typedef ushort2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ushort3, 1> { typedef ushort type; typedef ushort3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ushort3, 2> { typedef ushort2 type; typedef ushort3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ushort3, 3> { typedef ushort3 type; typedef ushort3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ushort3, 4> { typedef ushort4 type; typedef ushort3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ushort4, 1> { typedef ushort type; typedef ushort4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ushort4, 2> { typedef ushort2 type; typedef ushort4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ushort4, 3> { typedef ushort3 type; typedef ushort4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ushort4, 4> { typedef ushort4 type; typedef ushort4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uint, 1> { typedef uint type; typedef uint src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uint, 2> { typedef uint2 type; typedef uint src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uint, 3> { typedef uint3 type; typedef uint src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uint, 4> { typedef uint4 type; typedef uint src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<uint2, 1> { typedef uint type; typedef uint2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uint2, 2> { typedef uint2 type; typedef uint2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uint2, 3> { typedef uint3 type; typedef uint2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uint2, 4> { typedef uint4 type; typedef uint2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<uint3, 1> { typedef uint type; typedef uint3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uint3, 2> { typedef uint2 type; typedef uint3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uint3, 3> { typedef uint3 type; typedef uint3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uint3, 4> { typedef uint4 type; typedef uint3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<uint4, 1> { typedef uint type; typedef uint4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uint4, 2> { typedef uint2 type; typedef uint4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uint4, 3> { typedef uint3 type; typedef uint4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<uint4, 4> { typedef uint4 type; typedef uint4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ulong, 1> { typedef ulong type; typedef ulong src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ulong, 2> { typedef ulong2 type; typedef ulong src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ulong, 3> { typedef ulong3 type; typedef ulong src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ulong, 4> { typedef ulong4 type; typedef ulong src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<ulong2, 1> { typedef ulong type; typedef ulong2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ulong2, 2> { typedef ulong2 type; typedef ulong2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ulong2, 3> { typedef ulong3 type; typedef ulong2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ulong2, 4> { typedef ulong4 type; typedef ulong2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<ulong3, 1> { typedef ulong type; typedef ulong3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ulong3, 2> { typedef ulong2 type; typedef ulong3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ulong3, 3> { typedef ulong3 type; typedef ulong3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ulong3, 4> { typedef ulong4 type; typedef ulong3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<ulong4, 1> { typedef ulong type; typedef ulong4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ulong4, 2> { typedef ulong2 type; typedef ulong4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ulong4, 3> { typedef ulong3 type; typedef ulong4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<ulong4, 4> { typedef ulong4 type; typedef ulong4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<char, 1> { typedef char type; typedef char src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<char, 2> { typedef char2 type; typedef char src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<char, 3> { typedef char3 type; typedef char src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<char, 4> { typedef char4 type; typedef char src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<char2, 1> { typedef char type; typedef char2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<char2, 2> { typedef char2 type; typedef char2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<char2, 3> { typedef char3 type; typedef char2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<char2, 4> { typedef char4 type; typedef char2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<char3, 1> { typedef char type; typedef char3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<char3, 2> { typedef char2 type; typedef char3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<char3, 3> { typedef char3 type; typedef char3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<char3, 4> { typedef char4 type; typedef char3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<char4, 1> { typedef char type; typedef char4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<char4, 2> { typedef char2 type; typedef char4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<char4, 3> { typedef char3 type; typedef char4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<char4, 4> { typedef char4 type; typedef char4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<short, 1> { typedef short type; typedef short src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<short, 2> { typedef short2 type; typedef short src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<short, 3> { typedef short3 type; typedef short src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<short, 4> { typedef short4 type; typedef short src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<short2, 1> { typedef short type; typedef short2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<short2, 2> { typedef short2 type; typedef short2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<short2, 3> { typedef short3 type; typedef short2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<short2, 4> { typedef short4 type; typedef short2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<short3, 1> { typedef short type; typedef short3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<short3, 2> { typedef short2 type; typedef short3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<short3, 3> { typedef short3 type; typedef short3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<short3, 4> { typedef short4 type; typedef short3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<short4, 1> { typedef short type; typedef short4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<short4, 2> { typedef short2 type; typedef short4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<short4, 3> { typedef short3 type; typedef short4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<short4, 4> { typedef short4 type; typedef short4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<int, 1> { typedef int type; typedef int src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<int, 2> { typedef int2 type; typedef int src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<int, 3> { typedef int3 type; typedef int src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<int, 4> { typedef int4 type; typedef int src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<int2, 1> { typedef int type; typedef int2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<int2, 2> { typedef int2 type; typedef int2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<int2, 3> { typedef int3 type; typedef int2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<int2, 4> { typedef int4 type; typedef int2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<int3, 1> { typedef int type; typedef int3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<int3, 2> { typedef int2 type; typedef int3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<int3, 3> { typedef int3 type; typedef int3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<int3, 4> { typedef int4 type; typedef int3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<int4, 1> { typedef int type; typedef int4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<int4, 2> { typedef int2 type; typedef int4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<int4, 3> { typedef int3 type; typedef int4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<int4, 4> { typedef int4 type; typedef int4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<long, 1> { typedef long type; typedef long src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<long, 2> { typedef long2 type; typedef long src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<long, 3> { typedef long3 type; typedef long src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<long, 4> { typedef long4 type; typedef long src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<long2, 1> { typedef long type; typedef long2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<long2, 2> { typedef long2 type; typedef long2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<long2, 3> { typedef long3 type; typedef long2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<long2, 4> { typedef long4 type; typedef long2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<long3, 1> { typedef long type; typedef long3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<long3, 2> { typedef long2 type; typedef long3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<long3, 3> { typedef long3 type; typedef long3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<long3, 4> { typedef long4 type; typedef long3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<long4, 1> { typedef long type; typedef long4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<long4, 2> { typedef long2 type; typedef long4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<long4, 3> { typedef long3 type; typedef long4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<long4, 4> { typedef long4 type; typedef long4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<float, 1> { typedef float type; typedef float src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<float, 2> { typedef float2 type; typedef float src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<float, 3> { typedef float3 type; typedef float src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<float, 4> { typedef float4 type; typedef float src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<float2, 1> { typedef float type; typedef float2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<float2, 2> { typedef float2 type; typedef float2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<float2, 3> { typedef float3 type; typedef float2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<float2, 4> { typedef float4 type; typedef float2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<float3, 1> { typedef float type; typedef float3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<float3, 2> { typedef float2 type; typedef float3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<float3, 3> { typedef float3 type; typedef float3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<float3, 4> { typedef float4 type; typedef float3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<float4, 1> { typedef float type; typedef float4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<float4, 2> { typedef float2 type; typedef float4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<float4, 3> { typedef float3 type; typedef float4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<float4, 4> { typedef float4 type; typedef float4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<double, 1> { typedef double type; typedef double src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<double, 2> { typedef double2 type; typedef double src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<double, 3> { typedef double3 type; typedef double src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<double, 4> { typedef double4 type; typedef double src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 1; };
template<> struct vector_mapping<double2, 1> { typedef double type; typedef double2 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<double2, 2> { typedef double2 type; typedef double2 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<double2, 3> { typedef double3 type; typedef double2 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<double2, 4> { typedef double4 type; typedef double2 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 2; };
template<> struct vector_mapping<double3, 1> { typedef double type; typedef double3 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<double3, 2> { typedef double2 type; typedef double3 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<double3, 3> { typedef double3 type; typedef double3 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<double3, 4> { typedef double4 type; typedef double3 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 3; };
template<> struct vector_mapping<double4, 1> { typedef double type; typedef double4 src_type; static const size_t vec_size = 1; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<double4, 2> { typedef double2 type; typedef double4 src_type; static const size_t vec_size = 2; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<double4, 3> { typedef double3 type; typedef double4 src_type; static const size_t vec_size = 3; static const size_t src_vec_size = 4; };
template<> struct vector_mapping<double4, 4> { typedef double4 type; typedef double4 src_type; static const size_t vec_size = 4; static const size_t src_vec_size = 4; };

#endif
